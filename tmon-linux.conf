# Telegraf Configuration

# Configuration for telegraf agent
[agent]
  interval = "30s"
  round_interval = true
  metric_batch_size = 1000
  metric_buffer_limit = 10000
  collection_jitter = "0s"
  flush_interval = "30s"
  flush_jitter = "0s"
  precision = ""
  debug = true
  quiet = false
  #logtarget = "file"
  #logfile = "/path/to/tmon-linux.log"
  #logfile_rotation_interval = "24h"
  #logfile_rotation_max_size = "0MB"
  #logfile_rotation_max_archives = 5
  log_with_timezone = "UTC"

  ## Override default hostname, if empty use os.Hostname()
  hostname = ""
  ## If set to true, do no set the "host" tag in the telegraf agent.
  omit_hostname = false

#[[processors.execd]]
  ## One program to run as daemon.
  ## NOTE: process and each argument should each be their own string
  ## eg: command = ["/path/to/your_program", "arg1", "arg2"]
#  command = ["sed","s/\\./_/g"]

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################


# Run executable as long-running output plugin
[[outputs.execd]]
  command = ["./output_tstore"]   # embedded in the container image
  restart_delay = "10s"
  data_format = "json"

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

[[inputs.execd]]
  command = ["./psi"]
  signal = "none"

[[inputs.execd]]
   command = ["./utils.sh"]   # embedded in the container image
   signal = "STDIN"

# Read metrics about cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = false
  ## Whether to report total system cpu stats or not
  totalcpu = true
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false

# Read metrics about per_cpu usage
[[inputs.cpu]]
  ## Whether to report per-cpu stats or not
  percpu = true
  ## Whether to report total system cpu stats or not
  totalcpu = false
  ## If true, collect raw CPU time metrics
  collect_cpu_time = false
  ## If true, compute and report the sum of all non-idle CPU states
  report_active = false
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["usage_idle"]


## Read metrics about disk usage by mount point
[[inputs.disk]]
  ## By default stats will be gathered for all mount points.
  ## Set mount_points will restrict the stats to only the specified mount points.
  mount_points = ["/","${TRANSPARA_DISK}"]
  ## Ignore mount points by filesystem type.
  ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["free","total","used","used_percent"]
  #taginclude = ["host","path","device"]


## Read metrics about disk IO by device
[[inputs.diskio]]
  devices = ["sda*", "sdb*", "vd*"]
  ## skip_serial_number = false
  ## device_tags = ["ID_FS_TYPE", "ID_FS_USAGE"]
  ## name_templates = ["$ID_FS_LABEL","$DM_VG_NAME/$DM_LV_NAME"]
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["io_time","read_bytes","write_bytes"]

# Get kernel statistics from /proc/stat
[[inputs.kernel]]
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["context_switches","interrupts"]

# Read metrics about memory usage
[[inputs.mem]]
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["available","available_percent","buffered","cached","free","swap_total","total","used","used_percent"]

# Read metrics about swap memory usage
# [[inputs.swap]]
  ## no configuration

# Get the number of processes and group them by status
[[inputs.processes]]
  fieldpass = ["total"]
  ## no configuration

# Read metrics about system load & uptime
[[inputs.system]]
  fielddrop = ["uptime_format"]

# Read metrics about network
[[inputs.net]]
  ignore_protocol_stats = true
  
# Read metrics about Docker containers
[[inputs.docker]]
  endpoint = "unix:///var/run/docker.sock"
  perdevice = false
  # These are the possible values
  #perdevice_include = ["cpu","blkio","network"]
  # Put "cpu" on list to get information per core
  perdevice_include = []
  total = true
  # These are the possible values
  #total_include = ["cpu","blkio","network"]
  total_include = ["cpu"]
  #container_name_include = ["tstore","tstore-api","promscale","syslog","pi-tstore"]
  namepass = ["docker","docker_container_cpu","docker_container_mem"]
  ##  Only fields whose field key matches a pattern in this list are emitted
  fieldpass = ["n_containers","n_containers_running","n_containers_paused","n_containers_stopped","n_images","memory_total","usage_percent","usage"]
  ## Only tags defined in this list will be passed
  taginclude = ["host","cpu","container_name","container_image","container_version"]

#Read metrics abour PostgreSQL
[[inputs.postgresql]]
   address = "${TSTORE_ADDRESS}"
   databases = ["postgres","transpara"]
   taginclude = ["host","db"]
   fieldpass = [
    "numbackends",
    "xact_commit",
    "xact_rollback",
    "blks_read",
    "blks_hit",
    "tup_returned",
    "tup_fetched",
    "tup_inserted",
    "tup_updated",
    "tup_deleted",
    "conflicts",
    "temp_files",
    "temp_bytes",
    "deadlocks",
   ]
